# Varnish 4 VCLs must start with this statement.
vcl 4.0;

backend default {
  .host = "<%= node[:varnish][:backend_host] %>";
  .port = "<%= node[:varnish][:backend_port] %>";
}


sub vcl_recv {
  set req.http.x-host = req.http.host;
  set req.http.x-url = req.url;

  if (req.method != "GET" &&
      req.method != "HEAD" &&
      req.method != "PUT" &&
      req.method != "POST" &&
      req.method != "TRACE" &&
      req.method != "OPTIONS" &&
      req.method != "DELETE") {
    # Non-RFC2616 or CONNECT which is weird.
    return (pipe);
  }

  if (req.method != "GET" && req.method != "HEAD") {
    # We only deal with GET and HEAD by default.
    return (pass);
  }

  # Whitelist only the Drupal session cookie (secure or otherwise).
  if (req.http.cookie) {
    set req.http.cookie = ";" + req.http.cookie;
    set req.http.cookie = regsuball(req.http.cookie, "; +", ";");
    set req.http.cookie = regsuball(req.http.cookie, ";(S?SESS[a-z0-9]+)=", "; \1=");
    set req.http.cookie = regsuball(req.http.cookie, ";[^ ][^;]*", "");
    set req.http.cookie = regsuball(req.http.cookie, "^[; ]+|[; ]+$", "");

    # Remove a ";" prefix, if present.
    set req.http.cookie = regsub(req.http.cookie, "^;\s*", "");

    # Remove empty cookies.
    if (req.http.cookie ~ "^\s*$") {
      unset req.http.cookie;
    }

    # Don't use Cookie variance for static files.
    if (req.url ~ "\.(aif|aiff|au|avi|bin|bmp|bmp|cab|carb|cct|cdf|class|css|dcr|doc|dtd|eot|exe|flv|gcf|gff|gif|gif|grv|hdml|hqx|html|ico|ini|jpeg|jpg|jpg|js|mov|mp3|nc|pct|pdf|pdf|png|png|ppc|pws|svg|swa|swf|swf|ttf|txt|vbs|w32|wav|wbmp|wml|wmlc|wmls|wmlsc|woff|xml|xsd|xsl|zip)([?;]|$)") {
      unset req.http.cookie;
    }
  }
  
  return (hash);
}

sub vcl_hash {
  # Add the Cookie header (which gets trimmed down to just the
  # session cookie) to the cache key to differentiate anonymous traffic
  # from authenticated.
  if (req.http.cookie) {
    hash_data(req.http.cookie);
  }
}

sub vcl_backend_response {
  # Add an X-Host and X-URL header for bans.
  set beresp.http.x-host = bereq.http.host;
  set beresp.http.x-url = bereq.url;

  # Strip any cookies before an image/js/css is inserted into cache.
  if (bereq.url ~ "\.(aif|aiff|au|avi|bin|bmp|bmp|cab|carb|cct|cdf|class|css|dcr|doc|dtd|eot|exe|flv|gcf|gff|gif|gif|grv|hdml|hqx|html|ico|ini|jpeg|jpg|jpg|js|mov|mp3|nc|pct|pdf|pdf|png|png|ppc|pws|svg|swa|swf|swf|ttf|txt|vbs|w32|wav|wbmp|wml|wmlc|wmls|wmlsc|woff|xml|xsd|xsl|zip)([?;]|$)") {
    unset beresp.http.set-cookie;
  }

  # Set a short TTL for HTML to force re-updating against the Drupal
  # page cache.
  # if (beresp.http.Content-Type ~ "text/html" && beresp.ttl > 0s) {
  #   set beresp.ttl = 1m;
  # }

  # Keep this around for 24 hours past its TTL. This will allow Varnish 4 to
  # re-update it in the background.
  set beresp.grace = 24h;
  set beresp.keep = 24h;

  # Ensure that Varnish respects no cache headers since we are bypasssing the
  # built-in vcl_backend_response.
  if (beresp.ttl <= 0s || beresp.http.Set-Cookie || beresp.http.Surrogate-control ~ "no-store" || (!beresp.http.Surrogate-Control && beresp.http.Cache-Control ~ "no-cache|no-store|private")) {
    set beresp.uncacheable = true;
  }

  return (deliver);
}

sub vcl_deliver {
  // Don't serve our private housekeeping headers to the world.
  unset resp.http.x-host;
  unset resp.http.x-url;
}
